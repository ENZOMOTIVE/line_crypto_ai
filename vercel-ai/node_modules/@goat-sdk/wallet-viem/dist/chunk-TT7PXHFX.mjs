var v=Object.defineProperty;var p=(s,t)=>v(s,"name",{value:t,configurable:!0});import{EVMWalletClient as x}from"@goat-sdk/wallet-evm";import{encodeFunctionData as I,formatUnits as T,publicActions as F}from"viem";import{mainnet as A}from"viem/chains";import{eip712WalletActions as E,getGeneralPaymasterInput as N}from"viem/zksync";var l=class extends x{static{p(this,"ViemEVMWalletClient")}#t;#a;#n;get publicClient(){return this.#t.extend(F)}constructor(t,a){super(),this.#t=t,this.#a=a?.paymaster?.defaultAddress??"",this.#n=a?.paymaster?.defaultInput??N({innerInput:"0x"})}getAddress(){return this.#t.account?.address??""}getChain(){return{type:"evm",id:this.#t.chain?.id??0}}async signMessage(t){if(!this.#t.account)throw new Error("No account connected");return{signature:await this.#t.signMessage({message:t,account:this.#t.account})}}async signTypedData(t){if(!this.#t.account)throw new Error("No account connected");return{signature:await this.#t.signTypedData({domain:{...t.domain,chainId:typeof t.domain.chainId=="bigint"?Number(t.domain.chainId):t.domain.chainId},types:t.types,primaryType:t.primaryType,message:t.message,account:this.#t.account})}}async sendTransaction(t){let{to:a,abi:n,functionName:e,args:i,value:r,options:y,data:g}=t;if(!this.#t.account)throw new Error("No account connected");let w=a,c=y?.paymaster?.address??this.#a,o=y?.paymaster?.input??this.#n,u=!!c&&!!o,f=u?this.#t.extend(E()):this.#t;if(!n){let d={account:this.#t.account,to:w,chain:this.#t.chain,value:r,data:g,...u?{paymaster:c,paymasterInput:o}:{}},m=await f.sendTransaction(d);return this.waitForReceipt(m)}if(!e)throw new Error("Function name is required for contract calls");let{request:h}=await this.publicClient.simulateContract({account:this.#t.account,address:w,abi:n,functionName:e,args:i,chain:this.#t.chain,value:r});if(u){let d=I({abi:n,functionName:e,args:i}),m={account:this.#t.account,chain:this.#t.chain,to:h.address,data:d,value:h.value,paymaster:c,paymasterInput:o},C=await f.sendTransaction(m);return this.waitForReceipt(C)}let b=await this.#t.writeContract(h);return this.waitForReceipt(b)}async read(t){let{address:a,abi:n,functionName:e,args:i}=t;if(!n)throw new Error("Read request must include ABI for EVM");return{value:await this.publicClient.readContract({address:a,abi:n,functionName:e,args:i})}}async balanceOf(t){let a=await this.publicClient.getBalance({address:t}),n=this.#t.chain??A;return{value:T(BigInt(a),n.nativeCurrency.decimals),decimals:n.nativeCurrency.decimals,symbol:n.nativeCurrency.symbol,name:n.nativeCurrency.name,inBaseUnits:a.toString()}}async waitForReceipt(t){let a=await this.publicClient.waitForTransactionReceipt({hash:t});return{hash:a.transactionHash,status:a.status}}};function U(s,t){return new l(s,t)}p(U,"viem");export{l as a,U as b};
