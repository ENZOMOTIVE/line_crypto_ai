import{a as p}from"./chunk-LRPXRHNE.mjs";import{a as m,b as h,c as b,d as g,e as k,f as w,g as T,h as v,i as F,j}from"./chunk-7JSHDX4L.mjs";import{a as u}from"./chunk-YSXGDEY5.mjs";import{Tool as c}from"@goat-sdk/core";import{EVMWalletClient as a}from"@goat-sdk/wallet-evm";function d(f,n,t,e){var r=arguments.length,s=r<3?n:e===null?e=Object.getOwnPropertyDescriptor(n,t):e,l;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")s=Reflect.decorate(f,n,t,e);else for(var y=f.length-1;y>=0;y--)(l=f[y])&&(s=(r<3?l(s):r>3?l(n,t,s):l(n,t))||s);return r>3&&s&&Object.defineProperty(n,t,s),s}u(d,"_ts_decorate");function o(f,n){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(f,n)}u(o,"_ts_metadata");var i=class{static{u(this,"Erc20Service")}tokens;constructor({tokens:n}={}){this.tokens=n??[]}async getTokenInfoBySymbol(n,t){let e=this.tokens.find(l=>[l.symbol,l.symbol.toLowerCase()].includes(t.symbol));if(!e)throw Error(`Token with symbol ${t.symbol} not found`);let r=n.getChain(),s=e.chains[r.id]?.contractAddress;if(!s)throw Error(`Token with symbol ${t.symbol} not found on chain ${r.id}`);return{symbol:e?.symbol,contractAddress:s,decimals:e?.decimals,name:e?.name}}async getTokenBalance(n,t){try{let e=await n.read({address:t.tokenAddress,abi:p,functionName:"balanceOf",args:[t.wallet]});return String(e.value)}catch(e){throw Error(`Failed to fetch balance: ${e}`)}}async transfer(n,t){try{let e=t.to;return(await n.sendTransaction({to:t.tokenAddress,abi:p,functionName:"transfer",args:[e,t.amount]})).hash}catch(e){throw Error(`Failed to transfer: ${e}`)}}async getTokenTotalSupply(n,t){try{return(await n.read({address:t.tokenAddress,abi:p,functionName:"totalSupply"})).value}catch(e){throw Error(`Failed to fetch total supply: ${e}`)}}async getTokenAllowance(n,t){try{let e=t.owner,r=t.spender,s=await n.read({address:t.tokenAddress,abi:p,functionName:"allowance",args:[e,r]});return String(s.value)}catch(e){throw Error(`Failed to fetch allowance: ${e}`)}}async approve(n,t){try{let e=t.spender;return(await n.sendTransaction({to:t.tokenAddress,abi:p,functionName:"approve",args:[e,t.amount]})).hash}catch(e){throw Error(`Failed to approve: ${e}`)}}async revokeApproval(n,t){try{let e=t.spender;return(await n.sendTransaction({to:t.tokenAddress,abi:p,functionName:"approve",args:[e,0]})).hash}catch(e){throw Error(`Failed to revoke approval: ${e}`)}}async transferFrom(n,t){try{let e=t.from,r=t.to;return(await n.sendTransaction({to:t.tokenAddress,abi:p,functionName:"transferFrom",args:[e,r,t.amount]})).hash}catch(e){throw Error(`Failed to transfer from: ${e}`)}}async convertToBaseUnit(n){let{amount:t,decimals:e}=n,r=t*10**e;return String(r)}async convertFromBaseUnit(n){let{amount:t,decimals:e}=n,r=t/10**e;return String(r)}};d([c({description:"Get the ERC20 token info by its symbol, including the contract address, decimals, and name"}),o("design:type",Function),o("design:paramtypes",[typeof a>"u"?Object:a,typeof m>"u"?Object:m]),o("design:returntype",Promise)],i.prototype,"getTokenInfoBySymbol",null);d([c({description:"Get the balance of an ERC20 token in base units. Convert to decimal units before returning."}),o("design:type",Function),o("design:paramtypes",[typeof a>"u"?Object:a,typeof h>"u"?Object:h]),o("design:returntype",Promise)],i.prototype,"getTokenBalance",null);d([c({description:"Transfer an amount of an ERC20 token to an address"}),o("design:type",Function),o("design:paramtypes",[typeof a>"u"?Object:a,typeof b>"u"?Object:b]),o("design:returntype",Promise)],i.prototype,"transfer",null);d([c({description:"Get the total supply of an ERC20 token"}),o("design:type",Function),o("design:paramtypes",[typeof a>"u"?Object:a,typeof g>"u"?Object:g]),o("design:returntype",Promise)],i.prototype,"getTokenTotalSupply",null);d([c({description:"Get the allowance of an ERC20 token"}),o("design:type",Function),o("design:paramtypes",[typeof a>"u"?Object:a,typeof k>"u"?Object:k]),o("design:returntype",Promise)],i.prototype,"getTokenAllowance",null);d([c({description:"Approve an amount of an ERC20 token to an address"}),o("design:type",Function),o("design:paramtypes",[typeof a>"u"?Object:a,typeof w>"u"?Object:w]),o("design:returntype",Promise)],i.prototype,"approve",null);d([c({description:"Revoke approval for an ERC20 token to an address"}),o("design:type",Function),o("design:paramtypes",[typeof a>"u"?Object:a,typeof T>"u"?Object:T]),o("design:returntype",Promise)],i.prototype,"revokeApproval",null);d([c({description:"Transfer an amount of an ERC20 token from an address to another address"}),o("design:type",Function),o("design:paramtypes",[typeof a>"u"?Object:a,typeof v>"u"?Object:v]),o("design:returntype",Promise)],i.prototype,"transferFrom",null);d([c({description:"Convert an amount of an ERC20 token to its base unit"}),o("design:type",Function),o("design:paramtypes",[typeof F>"u"?Object:F]),o("design:returntype",Promise)],i.prototype,"convertToBaseUnit",null);d([c({description:"Convert an amount of an ERC20 token from its base unit to its decimal unit"}),o("design:type",Function),o("design:paramtypes",[typeof j>"u"?Object:j]),o("design:returntype",Promise)],i.prototype,"convertFromBaseUnit",null);export{i as a};
